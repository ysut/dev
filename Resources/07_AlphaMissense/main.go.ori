package main

import (
	"bufio"
	"compress/gzip"
	"database/sql"
	"fmt"
	"log"
	"os"
	"strings"

	_ "github.com/mattn/go-sqlite3"
)

// Mapping of table names to column names
var tableColumns = map[string][]string{
	// "AlphaMissense_hg19.tsv.gz":                           {"hg19", "CHROM, POS, REF, ALT, genome, uniprot_id, transcript_id, protein_variant, am_pathogenicity, am_class"},
	// "AlphaMissense_hg38.tsv.gz":                           {"hg38", "CHROM, POS, REF, ALT, genome, uniprot_id, transcript_id, protein_variant, am_pathogenicity, am_class"},
	"AlphaMissense_gene_hg19.tsv.gz":                      {"gene_hg19", "transcript_id, mean_am_pathogenicity"},
	// "AlphaMissense_gene_hg38.tsv.gz":                      {"gene_hg38", "transcript_id, mean_am_pathogenicity"},
	// "AlphaMissense_aa_substitutions.tsv.gz":               {"aasub", "uniprot_id, protein_variant, am_pathogenicity, am_class"},
	// "AlphaMissense_isoforms_hg38.tsv.gz":                  {"isf_hg38", "CHROM, POS, REF, ALT, genome, transcript_id, protein_variant, am_pathogenicity, am_class"},
	// "AlphaMissense_isoforms_aa_substitutions.tsv.gz":      {"isf_aasub", "transcript_id, protein_variant, am_pathogenicity, am_class"},
}

func main() {
	dbPath := "your_database.db" // ToDo: make it configurable using arguments
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		log.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	// Import data into the database defined in the dbPath 
	for filePath, tableInfo := range tableColumns {
		importData(db, filePath, tableInfo[0], tableInfo[1])
	}
}

// Function to import data from a gzip file into a table
func importData(db *sql.DB, filePath, tableName, columns string) {
	// Open the gzip file
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Error opening file %s: %v", filePath, err)
	}
	defer f.Close()

	// Create a gzip reader
	gz, err := gzip.NewReader(f)
	if err != nil {
		log.Fatalf("Error creating gzip reader for file %s: %v", filePath, err)
	}
	defer gz.Close()

	// Read the file line by line and insert into the database
	scanner := bufio.NewScanner(gz)
	for scanner.Scan() {
		line := scanner.Text()
		values := strings.Split(line, "\t")
		placeholders := strings.Repeat("?, ", len(values)-1) + "?"
		insertSQL := fmt.Sprintf("INSERT INTO %s (%s) VALUES (%s)", tableName, columns, placeholders)

		_, err := db.Exec(insertSQL, convertToInterfaceSlice(values)...)
		if err != nil {
			log.Fatalf("Error inserting data into %s: %v", tableName, err)
		}
	}
	if err := scanner.Err(); err != nil {
		log.Fatalf("Error reading from file %s: %v", filePath, err)
	}

	fmt.Printf("Data from %s imported into %s successfully.\n", filePath, tableName)
}

func convertToInterfaceSlice(slice []string) []interface{} {
	interfaces := make([]interface{}, len(slice))
	for i, v := range slice {
		interfaces[i] = v
	}
	return interfaces
}
